    excerpt: "Learn how to build modern web applications with React and TypeScript",
    content: `
      React and TypeScript are powerful tools for building modern web applications. 
      This comprehensive guide will walk you through setting up your development environment, 
      understanding the basics of TypeScript with React, and building your first application.
      
      TypeScript adds static typing to JavaScript, making your code more robust and easier to maintain. 
      When combined with React's component-based architecture, you get a powerful framework for building 
      scalable applications.
      
      Key benefits of using TypeScript with React:
      - Catch errors early in development
      - Better IDE support and code completion
      - Improved code maintainability
      - Enhanced team collaboration
      
      Let's dive into the fundamentals and best practices for building React applications with TypeScript.
    `,
    coverImage: "https://source.unsplash.com/random/800x600/?coding",
    publishedDate: "2024-04-23",
    readingTime: "5 min read",
    likes: 124,
    comments: 35,
    category: "Programming",
    author: {
      name: "Sarah Johnson",
      avatar: "https://source.unsplash.com/random/100x100/?portrait"
    }
  },
  {
    id: "2",
    title: "Creating Custom UI Components in Flutter",
    excerpt: "Dive into building reusable, beautiful custom UI components in Flutter. We'll explore advanced animation techniques and state management.",
    coverImage: "https://images.unsplash.com/photo-1581091226825-a6a2a5aee158?auto=format&fit=crop&w=800&q=80",
    publishedDate: "Apr 18, 2024",
    readingTime: "8 min read",
    likes: 256,
    comments: 48,
    category: "Design",
    author: {
      name: "Sophia Chen",
      avatar: "https://i.pravatar.cc/150?u=sophia"
    }
  },
  {
    id: "3",
    title: "State Management with GetX in Flutter",
    excerpt: "A comprehensive guide to using GetX for state management in Flutter. Learn how to simplify your code and improve performance.",
    coverImage: "https://images.unsplash.com/photo-1461749280684-dccba630e2f6?auto=format&fit=crop&w=800&q=80",
    publishedDate: "Apr 15, 2024",
    readingTime: "7 min read",
    likes: 190,
    comments: 25,
    category: "Flutter",
    author: {
      name: "Michael Davis",
      avatar: "https://i.pravatar.cc/150?u=michael"
    }
  },
  {
    id: "4",
    title: "Flutter vs. iOS Native Development",
    excerpt: "A detailed comparison of Flutter and native iOS development. We analyze performance, developer experience, and when to choose each approach.",
    coverImage: "https://images.unsplash.com/photo-1605810230434-7631ac76ec81?auto=format&fit=crop&w=800&q=80",
    publishedDate: "Apr 12, 2024",
    readingTime: "10 min read",
    likes: 312,
    comments: 64,
    category: "iOS",
    author: {
      name: "Emma Wilson",
      avatar: "https://i.pravatar.cc/150?u=emma"
    }
  },
  {
    id: "5",
    title: "Responsive Design Patterns for Mobile Apps",
    excerpt: "Learn essential responsive design patterns that work across different screen sizes and orientations for both iOS and Android.",
    coverImage: "https://images.unsplash.com/photo-1486312338219-ce68d2c6f44d?auto=format&fit=crop&w=800&q=80",
    publishedDate: "Apr 10, 2024",
    readingTime: "6 min read",
    likes: 142,
    comments: 18,
    category: "Design",
    author: {
      name: "Daniel Park",
      avatar: "https://i.pravatar.cc/150?u=daniel"
    }
  },
  {
    id: "6",
    title: "Cloudinary Integration for Image Management in Flutter",
    excerpt: "A step-by-step guide to integrating Cloudinary for efficient image uploading, transformation, and delivery in Flutter applications.",
    coverImage: "https://images.unsplash.com/photo-1487058792275-0ad4aaf24ca7?auto=format&fit=crop&w=800&q=80",
    publishedDate: "Apr 8, 2024",
    readingTime: "9 min read",
    likes: 87,
    comments: 12,
    category: "Flutter",
    author: {
      name: "Olivia Martinez",
      avatar: "https://i.pravatar.cc/150?u=olivia"
    }
  },
  {
    id: "7",
    title: "Building a Rich Text Editor in Flutter",
    excerpt: "Learn how to create a WYSIWYG editor from scratch in Flutter, with support for formatting, images, and more.",
    publishedDate: "Apr 5, 2024",
    readingTime: "12 min read",
    likes: 203,
    comments: 34,
    category: "Flutter",
    author: {
      name: "Ryan Thompson",
      avatar: "https://i.pravatar.cc/150?u=ryan"
    }
  },
  {
    id: "8",
    title: "User Authentication Best Practices with Firebase",
    excerpt: "Secure your Flutter app with Firebase Authentication. This guide covers email/password, social logins, and custom auth flows.",
    coverImage: "https://images.unsplash.com/photo-1519389950473-47ba0277781c?auto=format&fit=crop&w=800&q=80",
    publishedDate: "Apr 2, 2024",
    readingTime: "8 min read",
    likes: 165,
    comments: 23,
    category: "Flutter",
    author: {
      name: "Julia Kim",
      avatar: "https://i.pravatar.cc/150?u=julia"
    }
  }
];

export const categories = [
  "For You",
  "Following",
  "Featured",
  "New",
  "Flutter", 
  "iOS", 
  "Design", 
  "Firebase", 
  "Cloud"
];

--- End of lib/src/data/mockData.ts ---

Contents of lib/src/hooks/use-mobile.tsx:
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

--- End of lib/src/hooks/use-mobile.tsx ---

Contents of lib/src/hooks/use-toast.ts:
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

--- End of lib/src/hooks/use-toast.ts ---

Contents of lib/src/index.css:
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 210 20% 96%; /* #F5F7F7 Light Grayish Blue */
    --foreground: 0 0% 0%; /* #000407 Almost Black */

    --card: 210 20% 96%;
    --card-foreground: 0 0% 0%;

    --popover: 210 20% 96%;
    --popover-foreground: 0 0% 0%;

    --primary: 43 82% 50%; /* #EDB518 Golden Yellow */
    --primary-foreground: 0 0% 0%;

    --secondary: 352 97% 24%; /* #79031D Deep Red */
    --secondary-foreground: 210 20% 96%;

    --muted: 210 20% 96%; 
    --muted-foreground: 0 0% 0%;

    --accent: 43 82% 50%;
    --accent-foreground: 0 0% 0%;

    --destructive: 352 97% 24%;
    --destructive-foreground: 210 20% 96%;

    --border: 0 0% 0%;
    --input: 210 20% 96%;
    --ring: 43 82% 50%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 0 0% 0%; /* #000407 Almost Black */
    --foreground: 210 20% 96%; /* #F5F7F7 Light Grayish Blue */

    --card: 0 0% 0%;
    --card-foreground: 210 20% 96%;

    --popover: 0 0% 0%;
    --popover-foreground: 210 20% 96%;

    --primary: 210 20% 96%;
    --primary-foreground: 43 82% 50%;

    --secondary: 210 20% 96%;
    --secondary-foreground: 352 97% 24%;

    --muted: 0 0% 0%;
    --muted-foreground: 210 20% 96%;

    --accent: 210 20% 96%;
    --accent-foreground: 0 0% 0%;

    --destructive: 210 20% 96%;
    --destructive-foreground: 352 97% 24%;

    --border: 210 20% 96%;
    --input: 0 0% 0%;
    --ring: 210 20% 96%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
  }
}

/* Custom animations */
@keyframes fade-in {
  0% {
    opacity: 0;
    transform: translateY(10px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slide-in-right {
  0% {
    transform: translateX(20px);
    opacity: 0;
  }
  100% {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes scale-in {
  0% {
    transform: scale(0.95);
    opacity: 0;
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

.animate-fade-in {
  animation: fade-in 0.5s ease-out;
}

.animate-slide-in-right {
  animation: slide-in-right 0.4s ease-out;
}

.animate-scale-in {
  animation: scale-in 0.3s ease-out;
}

--- End of lib/src/index.css ---

Contents of lib/src/lib/utils.ts:
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

--- End of lib/src/lib/utils.ts ---

Contents of lib/src/main.tsx:
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

createRoot(document.getElementById("root")!).render(<App />);

--- End of lib/src/main.tsx ---

Contents of lib/src/pages/Bookmarks.tsx:
import { Bookmark } from "lucide-react";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { mockPosts } from "@/data/mockData";

export default function Bookmarks() {
  const bookmarkedPosts = mockPosts.slice(0, 4); // Using some mock posts as bookmarks

  return (
    <div className="flex-1 pb-10">
      {/* Top bar */}
      <div className="sticky top-0 z-10 bg-background/80 backdrop-blur-sm border-b border-border px-4 py-3 flex justify-between items-center">
        <div className="flex items-center gap-2">
          <Bookmark className="h-5 w-5" />
          <h1 className="text-2xl font-bold">Bookmarks</h1>
        </div>
        <Button variant="ghost" size="sm">
          Create list
        </Button>
      </div>

      {/* Bookmarks grid */}
      <ScrollArea className="flex-1">
        <div className="container max-w-5xl px-4 py-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {bookmarkedPosts.map((post) => (
              <Card key={post.id} className="overflow-hidden hover:bg-accent/5">
                <CardContent className="p-4">
                  <div className="aspect-video mb-4 overflow-hidden rounded-lg">
                    <img
                      src={post.coverImage}
                      alt={post.title}
                      className="w-full h-full object-cover"
                    />
                  </div>
                  <h3 className="text-lg font-semibold mb-2">{post.title}</h3>
                  <p className="text-sm text-muted-foreground mb-4">
                    {post.excerpt}
                  </p>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <img
                        src={post.author.avatar}
                        alt={post.author.name}
                        className="h-8 w-8 rounded-full"
                      />
                      <span className="text-sm font-medium">
                        {post.author.name}
                      </span>
                    </div>
                    <Button variant="ghost" size="sm">
                      Remove
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </ScrollArea>
    </div>
  );
}

--- End of lib/src/pages/Bookmarks.tsx ---

Contents of lib/src/pages/Explore.tsx:
import { useState } from "react";
import { Search } from "lucide-react";
import { Input } from "@/components/ui/input";
import { CategoryBar } from "@/components/category/CategoryBar";
import { PostCard } from "@/components/post/PostCard";
import { mockPosts, categories } from "@/data/mockData";

export default function Explore() {
  const [selectedCategory, setSelectedCategory] = useState(categories[0]);
  const [searchQuery, setSearchQuery] = useState("");
  
  // Filter trending posts based on likes (simplified for demo)
  const trendingPosts = [...mockPosts].sort((a, b) => b.likes - a.likes);

  return (
    <div className="flex-1 pb-10">
      {/* Top bar */}
      <div className="sticky top-0 z-10 bg-background/80 backdrop-blur-sm border-b border-border px-4 py-3">
        <h1 className="text-2xl font-bold mb-4">Explore</h1>
        
        {/* Search bar */}
        <div className="relative">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search stories"
            className="w-full bg-background pl-8 rounded-full border-muted"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
      </div>
      
      {/* Category selector */}
      <div className="px-4 mt-2">
        <CategoryBar 
          categories={categories}
          selectedCategory={selectedCategory}
          onSelectCategory={setSelectedCategory}
        />
      </div>
      
      {/* Content area */}
      <div className="container max-w-5xl px-4 mt-6">
        {/* Trending section */}
        <div className="mb-8">
          <h2 className="text-xl font-bold mb-6">Trending Now</h2>
          
          {/* Featured trending post */}
          {trendingPosts.length > 0 && (
            <div className="mb-6">
              <PostCard post={trendingPosts[0]} featured />
            </div>
          )}
          
          {/* Other trending posts */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {trendingPosts.slice(1, 5).map(post => (
              <PostCard key={post.id} post={post} />
            ))}
          </div>
        </div>
        
        {/* Floating create button (visible on mobile) */}
        <div className="fixed bottom-6 right-6 md:hidden">
          <div className="h-14 w-14 rounded-full shadow-lg bg-accent hover:bg-accent/90 flex items-center justify-center text-white">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-pen-square">
              <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
              <path d="M18.5 2.5a2.12 2.12 0 0 1 3 3L12 15l-4 1 1-4Z"/>
            </svg>
          </div>
        </div>
      </div>
    </div>
  );
}

--- End of lib/src/pages/Explore.tsx ---

Contents of lib/src/pages/Home.tsx:

import { useState } from "react";
import { Bell } from "lucide-react";
import { Button } from "@/components/ui/button";
import { CategoryBar } from "@/components/category/CategoryBar";
import { PostCard } from "@/components/post/PostCard";
import { mockPosts, categories } from "@/data/mockData";

export default function Home() {
  const [selectedCategory, setSelectedCategory] = useState(categories[0]);
  
  // Filter posts based on selected category
  const filteredPosts = selectedCategory === "For You" || selectedCategory === "Following" || selectedCategory === "Featured" || selectedCategory === "New"
    ? mockPosts
    : mockPosts.filter(post => post.category === selectedCategory);
  
  // Get featured post (first post or filter by category)
  const featuredPost = filteredPosts.length > 0 ? filteredPosts[0] : null;
  
  // Get other posts (skip the featured one)
  const otherPosts = filteredPosts.slice(1);

  return (
    <div className="flex-1 pb-10">
      {/* Top bar */}
      <div className="sticky top-0 z-10 bg-background/80 backdrop-blur-sm border-b border-border px-4 py-3 flex justify-between items-center">
        <h1 className="text-2xl font-bold">PostPro</h1>
        <Button variant="ghost" size="icon">
          <Bell className="h-5 w-5" />
        </Button>
      </div>
      
      {/* Category selector */}
      <div className="px-4 mt-2">
        <CategoryBar 
          categories={categories}
          selectedCategory={selectedCategory}
          onSelectCategory={setSelectedCategory}
        />
      </div>
      
      {/* Content area */}
      <div className="container max-w-5xl px-4 mt-6">
        {/* Featured post */}
        {featuredPost && (
          <div className="mb-8">
            <PostCard post={featuredPost} featured />
          </div>
        )}
        
        {/* Post grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {otherPosts.map(post => (
            <PostCard key={post.id} post={post} />
          ))}
        </div>
        
        {/* Floating create button (visible on mobile) */}
        <div className="fixed bottom-6 right-6 md:hidden">
          <Button size="lg" className="h-14 w-14 rounded-full shadow-lg bg-accent hover:bg-accent/90">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-pen-square">
              <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
              <path d="M18.5 2.5a2.12 2.12 0 0 1 3 3L12 15l-4 1 1-4Z"/>
            </svg>
          </Button>
        </div>
      </div>
    </div>
  );
}

--- End of lib/src/pages/Home.tsx ---

Contents of lib/src/pages/Library.tsx:
import { Library as LibraryIcon } from "lucide-react";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { mockPosts } from "@/data/mockData";

export default function Library() {
  const savedPosts = mockPosts.slice(0, 3);
  const readingLists = [
    { id: 1, name: "Tech Articles", count: 12 },
    { id: 2, name: "Design Inspiration", count: 8 },
    { id: 3, name: "Development Tips", count: 15 },
  ];

  return (
    <div className="flex-1 pb-10">
      {/* Top bar */}
      <div className="sticky top-0 z-10 bg-background/80 backdrop-blur-sm border-b border-border px-4 py-3 flex justify-between items-center">
        <div className="flex items-center gap-2">
          <LibraryIcon className="h-5 w-5" />
          <h1 className="text-2xl font-bold">Library</h1>
        </div>
      </div>

      {/* Content */}
      <ScrollArea className="flex-1">
        <div className="container max-w-5xl px-4 py-6">
          <Tabs defaultValue="saved">
            <TabsList>
              <TabsTrigger value="saved">Saved Stories</TabsTrigger>
              <TabsTrigger value="lists">Reading Lists</TabsTrigger>
            </TabsList>

            <TabsContent value="saved" className="mt-6">
              <div className="grid grid-cols-1 gap-6">
                {savedPosts.map((post) => (
                  <Card key={post.id} className="overflow-hidden hover:bg-accent/5">
                    <CardContent className="p-4">
                      <div className="flex gap-4">
                        <div className="w-32 h-24 overflow-hidden rounded-lg">
                          <img
                            src={post.coverImage}
                            alt={post.title}
                            className="w-full h-full object-cover"
                          />
                        </div>
                        <div className="flex-1">
                          <h3 className="text-lg font-semibold mb-2">
                            {post.title}
                          </h3>
                          <p className="text-sm text-muted-foreground mb-2">
                            {post.excerpt}
                          </p>
                          <div className="flex items-center gap-2">
                            <img
                              src={post.author.avatar}
                              alt={post.author.name}
                              className="h-6 w-6 rounded-full"
                            />
                            <span className="text-sm">{post.author.name}</span>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="lists" className="mt-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {readingLists.map((list) => (
                  <Card key={list.id} className="hover:bg-accent/5">
                    <CardContent className="p-4">
                      <h3 className="text-lg font-semibold mb-2">{list.name}</h3>
                      <p className="text-sm text-muted-foreground">
                        {list.count} stories
                      </p>
                      <Button variant="ghost" size="sm" className="mt-4">
                        View list
                      </Button>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </ScrollArea>
    </div>
  );
}

--- End of lib/src/pages/Library.tsx ---

Contents of lib/src/pages/NewStory.tsx:

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { EyeIcon, Save, X } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

export default function NewStory() {
  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");
  const { toast } = useToast();

  const handleSaveDraft = () => {
    toast({
      title: "Draft saved",
      description: "Your story has been saved as a draft",
    });
  };

  return (
    <div className="flex-1 pb-10 animate-fade-in">
      {/* Top bar */}
      <div className="sticky top-0 z-10 bg-background/80 backdrop-blur-sm border-b border-border">
        <div className="container max-w-5xl px-4 py-3 flex justify-between items-center">
          <Button 
            variant="ghost" 
            size="icon"
            onClick={() => window.history.back()}
          >
            <X className="h-5 w-5" />
          </Button>
          <div className="flex items-center gap-2">
            <Button 
              variant="outline" 
              size="sm"
              className="hidden sm:flex"
              onClick={handleSaveDraft}
            >
              <Save className="mr-2 h-4 w-4" />
              Save draft
            </Button>
            <Button 
              variant="outline" 
              size="sm"
              className="hidden sm:flex"
            >
              <EyeIcon className="mr-2 h-4 w-4" />
              Preview
            </Button>
            <Button 
              variant="default"
              size="sm"
              className="bg-accent hover:bg-accent/90"
            >
              Publish
            </Button>
          </div>
        </div>
      </div>

      {/* Editor area */}
      <div className="container max-w-3xl px-4 py-6">
        <Input
          type="text"
          placeholder="Story title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          className="text-4xl font-serif border-0 border-b border-border rounded-none px-0 text-foreground/90 focus-visible:ring-0 mb-8 placeholder:text-muted-foreground/50"
        />
        <Textarea
          placeholder="Tell your story..."
          value={content}
          onChange={(e) => setContent(e.target.value)}
          className="min-h-[60vh] text-lg border-0 resize-none focus-visible:ring-0 font-serif placeholder:text-muted-foreground/50"
        />
      </div>

      {/* Mobile bottom bar */}
      <div className="fixed bottom-0 left-0 right-0 border-t border-border bg-background/80 backdrop-blur-sm p-4 sm:hidden">
        <div className="flex justify-between gap-2">
          <Button 
            variant="outline" 
            size="sm" 
            className="flex-1"
            onClick={handleSaveDraft}
          >
            <Save className="mr-2 h-4 w-4" />
            Save
          </Button>
          <Button 
            variant="default"
            size="sm"
            className="flex-1 bg-accent hover:bg-accent/90"
          >
            Publish
          </Button>
        </div>
      </div>
    </div>
  );
}

--- End of lib/src/pages/NewStory.tsx ---

Contents of lib/src/pages/NotFound.tsx:

import { Link } from "react-router-dom";
import { Button } from "@/components/ui/button";

export default function NotFound() {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen px-4 text-center">
      <h1 className="text-6xl font-bold text-primary mb-4">404</h1>
      <h2 className="text-2xl font-bold mb-6">Page Not Found</h2>
      <p className="text-muted-foreground mb-8 max-w-md">
        We couldn't find the page you're looking for. It might have been moved or doesn't exist.
      </p>
      <Button asChild>
        <Link to="/">Return to Home</Link>
      </Button>
    </div>
  );
}

--- End of lib/src/pages/NotFound.tsx ---

Contents of lib/src/pages/Notifications.tsx:

import { Bell, Check, X } from "lucide-react";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Card } from "@/components/ui/card";

export default function Notifications() {
  const notifications = [
    {
      id: 1,
      avatar: "https://github.com/shadcn.png",
      author: "John Doe",
      action: "commented on",
      target: "Your Story: Getting Started with React",
      time: "2 hours ago",
      read: false,
    },
    {
      id: 2,
      avatar: "https://github.com/shadcn.png",
      author: "Jane Smith",
      action: "liked",
      target: "Your Story: Advanced TypeScript Tips",
      time: "5 hours ago",
      read: true,
    },
    // Add more mock notifications here
  ];

  return (
    <div className="flex-1 pb-10">
      {/* Top bar */}
      <div className="sticky top-0 z-10 bg-background/80 backdrop-blur-sm border-b border-border px-4 py-3 flex justify-between items-center">
        <div className="flex items-center gap-2">
          <Bell className="h-5 w-5" />
          <h1 className="text-2xl font-bold">Notifications</h1>
        </div>
        <div className="flex gap-2">
          <Button variant="ghost" size="sm">
            Mark all as read
          </Button>
        </div>
      </div>

      {/* Notifications list */}
      <ScrollArea className="flex-1">
        <div className="container max-w-3xl px-4 py-6">
          {notifications.map((notification) => (
            <Card
              key={notification.id}
              className={`mb-3 p-4 transition-all hover:bg-accent ${
                !notification.read ? "border-l-4 border-l-primary" : ""
              }`}
            >
              <div className="flex items-start justify-between gap-4">
                <div className="flex items-start gap-4">
                  <img
                    src={notification.avatar}
                    alt={notification.author}
                    className="h-10 w-10 rounded-full"
                  />
                  <div>
                    <p className="text-sm">
                      <span className="font-semibold">{notification.author}</span>{" "}
                      {notification.action}{" "}
                      <span className="font-semibold">{notification.target}</span>
                    </p>
                    <p className="text-sm text-muted-foreground">
                      {notification.time}
                    </p>
                  </div>
                </div>
                <div className="flex gap-2">
                  {!notification.read && (
                    <Button variant="ghost" size="icon" className="h-8 w-8">
                      <Check className="h-4 w-4" />
                    </Button>
                  )}
                  <Button variant="ghost" size="icon" className="h-8 w-8">
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </Card>
          ))}
        </div>
      </ScrollArea>
    </div>
  );
}

--- End of lib/src/pages/Notifications.tsx ---

Contents of lib/src/pages/Profile.tsx:
import { User, Edit, Settings } from "lucide-react";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { mockPosts } from "@/data/mockData";
import { format } from "date-fns";

export default function Profile() {
  const userPosts = mockPosts.slice(0, 3);
  
  return (
    <div className="flex-1 pb-10">
      {/* Top bar */}
      <div className="sticky top-0 z-10 bg-background/80 backdrop-blur-sm border-b border-border px-4 py-3 flex justify-between items-center">
        <div className="flex items-center gap-2">
          <User className="h-5 w-5" />
          <h1 className="text-2xl font-bold">Profile</h1>
        </div>
        <div className="flex gap-2">
          <Button variant="ghost" size="icon">
            <Settings className="h-5 w-5" />
          </Button>
        </div>
      </div>

      {/* Profile header */}
      <div className="container max-w-5xl px-4 py-8">
        <div className="text-center mb-8">
          <div className="relative inline-block">
            <img
              src="https://github.com/shadcn.png"
              alt="Profile"
              className="w-24 h-24 rounded-full mb-4"
            />
            <Button
              variant="secondary"
              size="icon"
              className="absolute bottom-0 right-0 rounded-full"
            >
              <Edit className="h-4 w-4" />
            </Button>
          </div>
          <h2 className="text-2xl font-bold mb-2">John Doe</h2>
          <p className="text-muted-foreground mb-4">
            Software Engineer & Technical Writer
          </p>
          <div className="flex justify-center gap-4">
            <div>
              <div className="font-bold">1.2k</div>
              <div className="text-sm text-muted-foreground">Followers</div>
            </div>
            <div>
              <div className="font-bold">234</div>
              <div className="text-sm text-muted-foreground">Following</div>
            </div>
          </div>
        </div>

        <Tabs defaultValue="stories">
          <TabsList className="w-full justify-start">
            <TabsTrigger value="stories">Stories</TabsTrigger>
            <TabsTrigger value="about">About</TabsTrigger>
          </TabsList>

          <TabsContent value="stories" className="mt-6">
            <div className="grid gap-6">
              {userPosts.map((post) => (
                <div
                  key={post.id}
                  className="flex gap-4 p-4 rounded-lg hover:bg-accent/5"
                >
                  <div className="w-32 h-24 overflow-hidden rounded-lg">
                    <img
                      src={post.coverImage}
                      alt={post.title}
                      className="w-full h-full object-cover"
                    />
                  </div>
                  <div className="flex-1">
                    <h3 className="text-lg font-semibold mb-2">{post.title}</h3>
                    <p className="text-sm text-muted-foreground mb-2">
                      {post.excerpt}
                    </p>
                    <div className="text-sm text-muted-foreground">
                      {format(new Date(post.publishedDate), 'MMM dd, yyyy')}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="about" className="mt-6">
            <div className="prose dark:prose-invert max-w-none">
              <p>
                I'm a software engineer passionate about web development and
                technical writing. I love sharing my knowledge and experiences
                through articles and tutorials.
              </p>
              <h3>Skills</h3>
              <ul>
                <li>React & TypeScript</li>
                <li>Node.js & Express</li>
                <li>UI/UX Design</li>
                <li>Technical Writing</li>
              </ul>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

--- End of lib/src/pages/Profile.tsx ---

Contents of lib/src/pages/StoryView.tsx:

import { ArrowLeft, MessageCircle, Share2, ThumbsUp } from "lucide-react";
import { Link, useNavigate, useParams } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { mockPosts } from "@/data/mockData";

export default function StoryView() {
  const navigate = useNavigate();
  const { id } = useParams();
  const post = mockPosts.find(p => p.id === id) || mockPosts[0];

  return (
    <div className="flex-1 min-h-screen pb-[60px] md:pb-0">
      <div className="sticky top-0 z-10 bg-background/80 backdrop-blur-sm border-b border-border px-4 py-3">
        <div className="flex items-center justify-between max-w-3xl mx-auto">
          <div className="flex items-center gap-4">
            <Button variant="ghost" size="icon" onClick={() => navigate(-1)}>
              <ArrowLeft className="h-5 w-5" />
            </Button>
            <h1 className="text-lg font-medium line-clamp-1">Story</h1>
          </div>
        </div>
      </div>

      <ScrollArea className="h-[calc(100vh-4rem)]">
        <article className="max-w-3xl mx-auto px-4 py-6">
          <div className="space-y-6">
            <h1 className="text-3xl font-bold">{post.title}</h1>
            
            <div className="flex items-center gap-3">
              <img 
                src={post.author.avatar} 
                alt={post.author.name}
                className="h-10 w-10 rounded-full object-cover"
              />
              <div>
                <h3 className="font-medium">{post.author.name}</h3>
                <p className="text-sm text-muted-foreground">
                  {post.publishedDate} Â· {post.readingTime}
                </p>
              </div>
            </div>

            <img
              src={post.coverImage}
              alt={post.title}
              className="w-full aspect-video rounded-lg object-cover"
            />

            <div className="prose prose-stone dark:prose-invert max-w-none">
              <p className="text-lg leading-relaxed text-muted-foreground mb-4">
                {post.excerpt}
              </p>
              <div className="whitespace-pre-line text-foreground">
                {post.content}
              </div>
            </div>

            <div className="flex items-center gap-4 pt-6">
              <Button variant="ghost" size="sm">
                <ThumbsUp className="h-4 w-4 mr-2" />
                {post.likes}
              </Button>
              <Button variant="ghost" size="sm">
                <MessageCircle className="h-4 w-4 mr-2" />
                {post.comments}
              </Button>
              <Button variant="ghost" size="sm">
                <Share2 className="h-4 w-4 mr-2" />
                Share
              </Button>
            </div>
          </div>
        </article>
      </ScrollArea>
    </div>
  );
}

--- End of lib/src/pages/StoryView.tsx ---

Contents of lib/src/vite-env.d.ts:
/// <reference types="vite/client" />

--- End of lib/src/vite-env.d.ts ---

Contents of lib/tailwind.config.ts:

import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        custom: {
          background: "#F5F7F7",
          accent: "#EDB518",
          destructive: "#79031D",
          dark: "#000407"
        }
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

--- End of lib/tailwind.config.ts ---

Contents of lib/tsconfig.app.json:
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}

--- End of lib/tsconfig.app.json ---

Contents of lib/tsconfig.json:
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false
  }
}

--- End of lib/tsconfig.json ---

Contents of lib/tsconfig.node.json:
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

--- End of lib/tsconfig.node.json ---

Contents of lib/vite.config.ts:
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [
    react(),
    mode === 'development' &&
    componentTagger(),
  ].filter(Boolean),
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
}));

--- End of lib/vite.config.ts ---

