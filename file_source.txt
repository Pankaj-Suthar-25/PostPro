Contents of lib/controllers/add_story_controller.dart:
import 'package:get/get.dart';
import '../models/story_model.dart';
import '../services/story_service.dart';

class AddStoryController extends GetxController {
  final StoryService _storyService = StoryService();
  var isLoading = false.obs; // Add this line

  Future<void> addStory(StoryModel story) async {
    isLoading.value = true; // Set loading to true
    await _storyService.addStory(story);
    isLoading.value = false; // Set loading to false
  }
}
--- End of lib/controllers/add_story_controller.dart ---

Contents of lib/controllers/auth_controller.dart:
import 'package:get/get.dart';
import '../models/user_model.dart';
import '../services/auth_service.dart';

class AuthController extends GetxController {
  final AuthService _authService = AuthService();
  var user = UserModel(id: '', email: '', name: '').obs;

  Future<void> login(String email, String password) async {
    user.value = await _authService.login(email, password);
  }

  Future<void> signup(String email, String password) async {
    user.value = await _authService.signup(email, password);
  }

  Future<void> logout() async {
    await _authService.logout();
    user.value = UserModel(id: '', name: '', email: '');
  }

  // In lib/controllers/auth_controller.dart
  Future<void> resetPassword(String email) async {
    try {
      await _authService.resetPassword(email);
    } catch (e) {
      Get.snackbar('Error', e.toString());
    }
  }
}

--- End of lib/controllers/auth_controller.dart ---

Contents of lib/controllers/bookmark_controller.dart:
import 'package:get/get.dart';
import '../models/story_model.dart';
import '../services/story_service.dart';

class BookmarkController extends GetxController {
  final StoryService _storyService = StoryService();
  var bookmarkedStories = <StoryModel>[].obs;

  void fetchBookmarkedStories() async {
    try {
      bookmarkedStories.value = await _storyService.fetchBookmarkedStories();
    } catch (e) {
      Get.snackbar('Error', e.toString());
    }
  }
}

--- End of lib/controllers/bookmark_controller.dart ---

Contents of lib/controllers/explore_controller.dart:
import 'package:get/get.dart';
import '../models/story_model.dart';
import '../services/story_service.dart';

class ExploreController extends GetxController {
  final StoryService _storyService = StoryService();
  var trendingStories = <StoryModel>[].obs;

  @override
  void onInit() {
    fetchTrendingStories();
    super.onInit();
  }

  void fetchTrendingStories() async {
    trendingStories.value = await _storyService.fetchTrendingStories();
  }
}

--- End of lib/controllers/explore_controller.dart ---

Contents of lib/controllers/home_controller.dart:
import 'package:get/get.dart';
import '../models/story_model.dart';
import '../services/story_service.dart';

class HomeController extends GetxController {
  final StoryService _storyService = StoryService();
  var stories = <StoryModel>[].obs;

  @override
  void onInit() {
    fetchStories();
    super.onInit();
  }

  void fetchStories() async {
    stories.value = await _storyService.fetchStories();
  }
}

--- End of lib/controllers/home_controller.dart ---

Contents of lib/controllers/profile_controller.dart:
import 'package:get/get.dart';
import '../models/user_model.dart';
import '../services/auth_service.dart';

class ProfileController extends GetxController {
  final AuthService _authService = AuthService();
  var user = UserModel(id: '', name: '', email: '').obs;

  void fetchUser() async {
    user.value = await _authService.getUser();
  }

  void updateUser (UserModel updatedUser ) async {
    try {
      await _authService.updateUser (updatedUser );
      fetchUser (); // Refresh user data after update
    } catch (e) {
      Get.snackbar('Error', e.toString());
    }
  }
}

--- End of lib/controllers/profile_controller.dart ---

Contents of lib/controllers/topic_controller.dart:
import 'package:get/get.dart';
import '../models/topic_model.dart';
import '../services/topic_service.dart';

class TopicController extends GetxController {
  final TopicService _topicService = TopicService();
  var topics = <TopicModel>[].obs;

  // In lib/controllers/topic_controller.dart
  void fetchTopics() async {
    try {
      topics.value = await _topicService.fetchTopics();
    } catch (e) {
      Get.snackbar('Error', e.toString());
    }
  }
}

--- End of lib/controllers/topic_controller.dart ---

Contents of lib/firebase_options.dart:
// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyArfpImj5jjYglZhnTRDyhSxXgvqrpdJ9U',
    appId: '1:816597884276:web:acb3d281e1cb4d98836021',
    messagingSenderId: '816597884276',
    projectId: 'post-pro-v1',
    authDomain: 'post-pro-v1.firebaseapp.com',
    storageBucket: 'post-pro-v1.firebasestorage.app',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyDDABkTFPfZIuXMOJAUYLPVCEPLT5D9HtQ',
    appId: '1:816597884276:android:a59f991f594d7f71836021',
    messagingSenderId: '816597884276',
    projectId: 'post-pro-v1',
    storageBucket: 'post-pro-v1.firebasestorage.app',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyC1x-TB_z2BFDHrLeVwrYDEkqGjaPhdtOA',
    appId: '1:816597884276:ios:b7b2ed8c3b983886836021',
    messagingSenderId: '816597884276',
    projectId: 'post-pro-v1',
    storageBucket: 'post-pro-v1.firebasestorage.app',
    iosBundleId: 'com.example.postpro',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyC1x-TB_z2BFDHrLeVwrYDEkqGjaPhdtOA',
    appId: '1:816597884276:ios:b7b2ed8c3b983886836021',
    messagingSenderId: '816597884276',
    projectId: 'post-pro-v1',
    storageBucket: 'post-pro-v1.firebasestorage.app',
    iosBundleId: 'com.example.postpro',
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: 'AIzaSyArfpImj5jjYglZhnTRDyhSxXgvqrpdJ9U',
    appId: '1:816597884276:web:426b79ca6fa3d697836021',
    messagingSenderId: '816597884276',
    projectId: 'post-pro-v1',
    authDomain: 'post-pro-v1.firebaseapp.com',
    storageBucket: 'post-pro-v1.firebasestorage.app',
  );
}

--- End of lib/firebase_options.dart ---

Contents of lib/main.dart:
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'firebase_options.dart';
import 'views/auth/login_view.dart';
import 'themes/light_theme.dart';
import 'themes/dark_theme.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return GetMaterialApp(
      title: 'PostPro',
      theme: LightTheme.theme,
      darkTheme: DarkTheme.theme,
      home: LoginView(),
      debugShowCheckedModeBanner: false,
    );
  }
}

--- End of lib/main.dart ---

Contents of lib/models/list_model.dart:
class ListModel {
  String id;
  String name;
  List<String> storyIds;
  bool isPrivate;

  ListModel({required this.id, required this.name, this.storyIds = const [], this.isPrivate = false});
}

--- End of lib/models/list_model.dart ---

Contents of lib/models/publication_model.dart:
class PublicationModel {
  String id;
  String name;
  String description;

  PublicationModel({required this.id, required this.name, required this.description});
}

--- End of lib/models/publication_model.dart ---

Contents of lib/models/story_model.dart:
class StoryModel {
  String id;
  String title;
  String content;
  String authorId;
  String publicationId;
  DateTime createdAt;

  StoryModel({
    required this.id,
    required this.title,
    required this.content,
    required this.authorId,
    required this.publicationId,
    DateTime? createdAt, // Make this nullable
  }) : createdAt = createdAt ?? DateTime.now(); // Assign current time if null
}
--- End of lib/models/story_model.dart ---

Contents of lib/models/topic_model.dart:
class TopicModel {
String id;
String name;
int storyCount;

TopicModel({required this.id, required this.name, this.storyCount = 0});
}

--- End of lib/models/topic_model.dart ---

Contents of lib/models/user_model.dart:
class UserModel {
  String id;
  String name;
  String email;
  int followersCount;
  int followingCount;

  UserModel({required this.id, required this.name, required this.email, this.followersCount = 0, this.followingCount = 0});
}

--- End of lib/models/user_model.dart ---

Contents of lib/services/auth_service.dart:
import 'package:firebase_auth/firebase_auth.dart';
import '../models/user_model.dart';

class AuthService {
  final FirebaseAuth _firebaseAuth = FirebaseAuth.instance;

  Future<UserModel> login(String email, String password) async {
    UserCredential userCredential = await _firebaseAuth.signInWithEmailAndPassword(email: email, password: password);
    return UserModel(id: userCredential.user!.uid, email: email, name: '');
  }

  Future<UserModel> signup(String email, String password) async {
    UserCredential userCredential = await _firebaseAuth.createUserWithEmailAndPassword(email: email, password: password);
    return UserModel(id: userCredential.user!.uid, email: email, name: '');
  }

  Future<void> logout() async {
    await _firebaseAuth.signOut();
  }

  Future<UserModel> getUser() async {
    User? user = _firebaseAuth.currentUser ;
    return UserModel(id: user!.uid, email: user.email!, name: '');
  }

  Future<void> updateUser (UserModel updatedUser ) async {
    User? user = _firebaseAuth.currentUser ;
    if (user != null) {
      // Update user profile logic here
      // For example, you can update the user's display name or other attributes
      await user.updateProfile(displayName: updatedUser .name);
      // You may also want to update the user in your database
    }
  }

  // In lib/services/auth_service.dart
  Future<void> resetPassword(String email) async {
    await _firebaseAuth.sendPasswordResetEmail(email: email);
  }
}

--- End of lib/services/auth_service.dart ---

Contents of lib/services/cloudinary_service.dart:
import 'package:cloudinary/cloudinary.dart';

class CloudinaryService {
  final Cloudinary _cloudinary = Cloudinary.signedConfig(
    apiKey: 'your_api_key',
    apiSecret: 'your_api_secret',
    cloudName: 'your_cloud_name',
  );

  Future<String?> uploadImage(String filePath) async {
    final response = await _cloudinary.upload(
      file: filePath,
      resourceType: CloudinaryResourceType.image,
    );
    return response.secureUrl;
  }
}

--- End of lib/services/cloudinary_service.dart ---

Contents of lib/services/story_service.dart:
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/story_model.dart';

class StoryService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<List<StoryModel>> fetchStories() async {
    QuerySnapshot snapshot = await _firestore.collection('stories').get();
    return snapshot.docs.map((doc) => StoryModel(id: doc.id, title: doc['title'], content: doc['content'], authorId: '', publicationId: '',)).toList();
  }

  Future<void> addStory(StoryModel story) async {
    await _firestore.collection('stories').add({
      'title': story.title,
      'content': story.content,
      'authorId': story.authorId,
      'publicationId': story.publicationId,
      'createdAt': story.createdAt,
    });
  }

  // In lib/services/story_service.dart
  Future<List<StoryModel>> fetchBookmarkedStories() async {
    // Assuming you have a way to get the current user's ID
    String currentUserId = 'currentUser Id'; // Replace with actual user ID
    QuerySnapshot snapshot = await _firestore
        .collection('bookmarks')
        .where('userId', isEqualTo: currentUserId)
        .get();
    return snapshot.docs.map((doc) => StoryModel(
      id: doc.id,
      title: doc['title'],
      content: doc['content'],
      authorId: doc['authorId'],
      publicationId: doc['publicationId'],
      createdAt: doc['createdAt'].toDate(),
    )).toList();
  }

  Future<List<StoryModel>> fetchTrendingStories() async {
    QuerySnapshot snapshot = await _firestore.collection('stories').orderBy('createdAt', descending: true).limit(10).get();
    return snapshot.docs.map((doc) => StoryModel(
      id: doc.id,
      title: doc['title'],
      content: doc['content'],
      authorId: doc['authorId'],
      publicationId: doc['publicationId'],
      createdAt: doc['createdAt'].toDate(),
    )).toList();
  }
}

--- End of lib/services/story_service.dart ---

Contents of lib/services/topic_service.dart:
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/topic_model.dart';

class TopicService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // In lib/services/topic_service.dart
  Future<List<TopicModel>> fetchTopics() async {
    QuerySnapshot snapshot = await _firestore.collection('topics').get();
    return snapshot.docs.map((doc) => TopicModel(
      id: doc.id,
      name: doc['name'],
      storyCount: doc['storyCount'],
    )).toList();
  }
}

--- End of lib/services/topic_service.dart ---

Contents of lib/themes/dark_theme.dart:
import 'package:flutter/material.dart';

class DarkTheme {
  static ThemeData get theme {
    return ThemeData(
      primarySwatch: Colors.blue,
      brightness: Brightness.dark,
      visualDensity: VisualDensity.adaptivePlatformDensity,
    );
  }
}

--- End of lib/themes/dark_theme.dart ---

Contents of lib/themes/light_theme.dart:
import 'package:flutter/material.dart';

class LightTheme {
 static ThemeData get theme {
   return ThemeData(
     primarySwatch: Colors.blue,
     brightness: Brightness.light,
     visualDensity: VisualDensity.adaptivePlatformDensity,
   );
 }
}

--- End of lib/themes/light_theme.dart ---

Contents of lib/utils/constants.dart:
class Constants {
  static const String appName = 'PostPro';
  static const String apiUrl = 'https://api.example.com';
}

--- End of lib/utils/constants.dart ---

Contents of lib/utils/helpers.dart:
import 'package:get/get.dart';

class Helpers {
  static void showSnackbar(String message) {
    Get.snackbar('Notification', message);
  }
}
--- End of lib/utils/helpers.dart ---

Contents of lib/utils/validators.dart:
class Validators {
  static String? validateEmail(String? value) {
    if (value == null || !RegExp(r'^[^@]+@[^@]+\.[^@]+').hasMatch(value)) {
      return 'Enter a valid email';
    }
    return null;
  }

  static String? validatePassword(String? value) {
    if (value == null || value.length < 6) {
      return 'Password must be at least 6 characters';
    }
    return null;
  }
}
--- End of lib/utils/validators.dart ---

Contents of lib/views/add_story/add_story_view.dart:
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../controllers/add_story_controller.dart';
import '../../models/story_model.dart';

class AddStoryView extends StatelessWidget {
  final AddStoryController _addStoryController = Get.put(AddStoryController());
  final StoryModel story = StoryModel(
    id: '',
    title: '',
    content: '',
    authorId: '',
    publicationId: '',
    createdAt: null,
  );

  AddStoryView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Add Story')),
      body: Center(
        child: Column(
          children: [
            TextField(
              decoration: InputDecoration(labelText: 'Title'),
              onChanged: (value) => story.title = value,
            ),
            TextField(
              decoration: InputDecoration(labelText: 'Content'),
              onChanged: (value) => story.content = value,
            ),
            ElevatedButton(
              onPressed: () {
                _addStoryController.addStory(story);
                Get.back();
              },
              child: Text('Submit'),
            ),
          ],
        ),
      ),
    );
  }
}

--- End of lib/views/add_story/add_story_view.dart ---

Contents of lib/views/add_story/story_preview_view.dart:
import 'package:flutter/material.dart';
import '../../models/story_model.dart';

class StoryPreviewView extends StatelessWidget {
  final StoryModel story;

  const StoryPreviewView({super.key, required this.story});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Preview Story')),
      body: Center(
        child: Column(
          children: [
            Text(story.title, style: TextStyle(fontSize: 24)),
            SizedBox(height: 20),
            Text(story.content),
          ],
        ),
      ),
    );
  }
}

--- End of lib/views/add_story/story_preview_view.dart ---

Contents of lib/views/add_story_view.dart:
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../controllers/add_story_controller.dart';
import '../models/story_model.dart';

class AddStoryView extends StatelessWidget {
  final AddStoryController _controller = Get.put(AddStoryController());

  final TextEditingController titleController = TextEditingController();
  final TextEditingController contentController = TextEditingController();

  AddStoryView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Add Story'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: titleController,
              decoration: InputDecoration(labelText: 'Title'),
            ),
            TextField(
              controller: contentController,
              decoration: InputDecoration(labelText: 'Content'),
              maxLines: 5,
            ),
            SizedBox(height: 20),
            Obx(() {
              return ElevatedButton(
                onPressed: _controller.isLoading.value
                    ? null
                    : () {
                        _controller.addStory(StoryModel(
                          title: titleController.text,
                          content: contentController.text,
                          authorId: 'currentUser Id', // Replace with actual user ID
                          createdAt: DateTime.now(), id: '', publicationId: '',
                        ));
                      },
                child: _controller.isLoading.value
                    ? CircularProgressIndicator()
                    : Text('Add Story'),
              );
            }),
          ],
        ),
      ),
    );
  }
}

--- End of lib/views/add_story_view.dart ---

Contents of lib/views/auth/forgot_password_view.dart:
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../controllers/auth_controller.dart';

class ForgotPasswordView extends StatelessWidget {
  final AuthController _authController = Get.put(AuthController());
  final TextEditingController emailController = TextEditingController();

  ForgotPasswordView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Forgot Password')),
      body: Center(
        child: Column(
          children: [
            TextField(
              controller: emailController,
              decoration: InputDecoration(labelText: 'Email'),
            ),
            ElevatedButton(
              onPressed: () async {
                try {
                  await _authController.resetPassword(emailController.text);
                  Get.snackbar('Success', 'Password reset email sent.');
                } catch (e) {
                  Get.snackbar('Error', e.toString());
                }
              },
              child: Text('Reset Password'),
            ),
          ],
        ),
      ),
    );
  }
}
--- End of lib/views/auth/forgot_password_view.dart ---

Contents of lib/views/auth/login_view.dart:
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../controllers/auth_controller.dart';
import '../home/home_view.dart';

class LoginView extends StatelessWidget {
  final AuthController _authController = Get.put(AuthController());
  final TextEditingController emailController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();

  LoginView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Login')),
      body: Center(
        child: Column(
          children: [
            TextField(
              controller: emailController,
              decoration: InputDecoration(labelText: 'Email'),
            ),
            TextField(
              controller: passwordController,
              decoration: InputDecoration(labelText: 'Password'),
              obscureText: true,
            ),
            ElevatedButton(
              onPressed: () async {
                try {
                  await _authController.login(emailController.text, passwordController.text);
                  Get.offAll(HomeView()); // Navigate to HomeView after login
                } catch (e) {
                  Get.snackbar('Error', e.toString());
                }
              },
              child: Text('Login'),
            ),
          ],
        ),
      ),
    );
  }
}
--- End of lib/views/auth/login_view.dart ---

Contents of lib/views/auth/signup_view.dart:
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../controllers/auth_controller.dart';
import '../home/home_view.dart';

class SignupView extends StatelessWidget {
  final AuthController _authController = Get.put(AuthController());
  final TextEditingController emailController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();

  SignupView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Sign Up')),
      body: Center(
        child: Column(
          children: [
            TextField(
              controller: emailController,
              decoration: InputDecoration(labelText: 'Email'),
            ),
            TextField(
              controller: passwordController,
              decoration: InputDecoration(labelText: 'Password'),
              obscureText: true,
            ),
            ElevatedButton(
              onPressed: () async {
                try {
                  await _authController.signup(emailController.text, passwordController.text);
                  Get.offAll(HomeView()); // Navigate to HomeView after signup
                } catch (e) {
                  Get.snackbar('Error', e.toString());
                }
              },
              child: Text('Sign Up'),
            ),
          ],
        ),
      ),
    );
  }
}
--- End of lib/views/auth/signup_view.dart ---

Contents of lib/views/bookmark/bookmark_view.dart:
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../controllers/bookmark_controller.dart';

class BookmarkView extends StatelessWidget {
  final BookmarkController _bookmarkController = Get.put(BookmarkController());

  BookmarkView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Bookmarks')),
      body: Obx(() {
        return ListView.builder(
          itemCount: _bookmarkController.bookmarkedStories.length,
          itemBuilder: (context, index) {
            return ListTile(title: Text(_bookmarkController.bookmarkedStories[index].title));
          },
        );
      }),
    );
  }
}

--- End of lib/views/bookmark/bookmark_view.dart ---

Contents of lib/views/explore/explore_view.dart:
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../controllers/explore_controller.dart';

class ExploreView extends StatelessWidget {
  final ExploreController _exploreController = Get.put(ExploreController());

  ExploreView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Explore')),
      body: Obx(() {
        return ListView.builder(
          itemCount: _exploreController.trendingStories.length,
          itemBuilder: (context, index) {
            return ListTile(title: Text(_exploreController.trendingStories[index].title));
          },
        );
      }),
    );
  }
}

--- End of lib/views/explore/explore_view.dart ---

Contents of lib/views/explore/topic_view.dart:
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../controllers/topic_controller.dart';

class TopicView extends StatelessWidget {
  final TopicController _topicController = Get.put(TopicController());

  TopicView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Topics')),
      body: Obx(() {
        return ListView.builder(
          itemCount: _topicController.topics.length,
          itemBuilder: (context, index) {
            return ListTile(title: Text(_topicController.topics[index].name));
          },
        );
      }),
    );
  }
}

--- End of lib/views/explore/topic_view.dart ---

Contents of lib/views/explore/trending_view.dart:
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../controllers/explore_controller.dart';

class TrendingView extends StatelessWidget {
  final ExploreController _exploreController = Get.put(ExploreController());

  TrendingView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Trending')),
      body: Obx(() {
        return ListView.builder(
          itemCount: _exploreController.trendingStories.length,
          itemBuilder: (context, index) {
            return ListTile(title: Text(_exploreController.trendingStories[index].title));
          },
        );
      }),
    );
  }
}

--- End of lib/views/explore/trending_view.dart ---

Contents of lib/views/home/category_bar.dart:
import 'package:flutter/material.dart';

class CategoryBar extends StatelessWidget {
  const CategoryBar({super.key});

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceAround,
      children: [
        Text('For You'),
        Text('Following'),
        Text('Featured'),
        Text(' New'),
        Text('Flutter'),
        Text('iOS'),
        Text('Design'),
      ],
    );
  }
}

--- End of lib/views/home/category_bar.dart ---

Contents of lib/views/home/home_view.dart:
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../controllers/home_controller.dart';

class HomeView extends StatelessWidget {
  final HomeController _homeController = Get.put(HomeController());

  HomeView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Home')),
      body: Obx(() {
        return ListView.builder(
          itemCount: _homeController.stories.length,
          itemBuilder: (context, index) {
            return ListTile(title: Text(_homeController.stories[index].title));
          },
        );
      }),
    );
  }
}

--- End of lib/views/home/home_view.dart ---

Contents of lib/views/home/story_card.dart:
import 'package:flutter/material.dart';
import '../../models/story_model.dart';

class StoryCard extends StatelessWidget {
  final StoryModel story;

  const StoryCard({super.key, required this.story});

  @override
  Widget build(BuildContext context) {
    return Card(
      child: Column(
        children: [
          Text(story.title, style: TextStyle(fontSize: 20)),
          Text(story.content),
        ],
      ),
    );
  }
}

--- End of lib/views/home/story_card.dart ---

Contents of lib/views/library/library_view.dart:
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../controllers/bookmark_controller.dart';

class LibraryView extends StatelessWidget {
  final BookmarkController _bookmarkController = Get.put(BookmarkController());

  LibraryView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Library')),
      body: Obx(() {
        return ListView.builder(
          itemCount: _bookmarkController.bookmarkedStories.length,
          itemBuilder: (context, index) {
            return ListTile(title: Text(_bookmarkController.bookmarkedStories[index].title));
          },
        );
      }),
    );
  }
}

--- End of lib/views/library/library_view.dart ---

Contents of lib/views/profile/edit_profile_view.dart:
// In lib/views/profile/edit_profile_view.dart
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../controllers/profile_controller.dart';
import '../../models/user_model.dart';

class EditProfileView extends StatelessWidget {
  final ProfileController _profileController = Get.put(ProfileController());
  final TextEditingController nameController = TextEditingController();
  final TextEditingController bioController = TextEditingController();

  EditProfileView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Edit Profile')),
      body: Center(
        child: Column(
          children: [
            TextField(
              controller: nameController,
              decoration: InputDecoration(labelText: 'Name'),
            ),
            TextField(
              controller: bioController,
              decoration: InputDecoration(labelText: 'Bio'),
            ),
            ElevatedButton(
              onPressed: () {
                _profileController.updateUser(UserModel(
                  id: _profileController.user.value.id,
                  name: nameController.text,
                  email: _profileController.user.value.email,
                  followersCount: _profileController.user.value.followersCount,
                  followingCount: _profileController.user.value.followingCount,
                ));
                Get.back(); // Go back after updating
              },
              child: Text('Save'),
            ),
          ],
        ),
      ),
    );
  }
}
--- End of lib/views/profile/edit_profile_view.dart ---

Contents of lib/views/profile/profile_view.dart:
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../controllers/profile_controller.dart';

class ProfileView extends StatelessWidget {
  final ProfileController _profileController = Get.put(ProfileController());

  ProfileView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Profile')),
      body: Obx(() {
        return Column(
          children: [
            Text('Name: ${_profileController.user.value.name}'),
            Text('Followers: ${_profileController.user.value.followersCount}'),
            Text('Following: ${_profileController.user.value.followingCount}'),
          ],
        );
      }),
    );
  }
}
--- End of lib/views/profile/profile_view.dart ---

Contents of lib/views/profile/stats_view.dart:
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../controllers/profile_controller.dart';

class StatsView extends StatelessWidget {
  final ProfileController _profileController = Get.put(ProfileController());

  StatsView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Statistics')),
      body: Center(
        child: Column(
          children: [
            Text('Followers: ${_profileController.user.value.followersCount}'),
            Text('Following: ${_profileController.user.value.followingCount}'),
            // Additional stats can be added here
          ],
        ),
      ),
    );
  }
}

--- End of lib/views/profile/stats_view.dart ---

Contents of lib/widgets/category_chip.dart:
import 'package:flutter/material.dart';

class CategoryChip extends StatelessWidget {
  final String label;

  const CategoryChip({super.key, required this.label});

  @override
  Widget build(BuildContext context) {
    return Chip(
      label: Text(label),
    );
  }
}

--- End of lib/widgets/category_chip.dart ---

Contents of lib/widgets/custom_button.dart:
import 'package:flutter/material.dart';

class CustomButton extends StatelessWidget {
  final String text;
  final VoidCallback onPressed;

  const CustomButton({super.key, required this.text, required this.onPressed});

  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      onPressed: onPressed,
      child: Text(text),
    );
  }
}

--- End of lib/widgets/custom_button.dart ---

Contents of lib/widgets/custom_text_field.dart:
import 'package:flutter/material.dart';

class CustomTextField extends StatelessWidget {
  final String label;
  final TextEditingController controller;

  const CustomTextField({super.key, required this.label, required this.controller});

  @override
  Widget build(BuildContext context) {
    return TextField(
      controller: controller,
      decoration: InputDecoration(labelText: label),
    );
  }
}

--- End of lib/widgets/custom_text_field.dart ---

Contents of lib/widgets/story_list_item.dart:
import 'package:flutter/material.dart';
import '../models/story_model.dart';

class StoryListItem extends StatelessWidget {
  final StoryModel story;

  const StoryListItem({super.key, required this.story});

  @override
  Widget build(BuildContext context) {
    return ListTile(
      title: Text(story.title),
      subtitle: Text(story.content),
    );
  }
}

--- End of lib/widgets/story_list_item.dart ---

